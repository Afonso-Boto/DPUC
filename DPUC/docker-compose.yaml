version: '3.8'

services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: ${ES01_NAME}
    restart: always
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=${ES01_NAME}
      - cluster.name=${CLUSTER_NAME}
      - xpack.security.enabled=false
      - discovery.type=single-node
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsSL http://localhost:9200/_cat/health?h=status | grep -q 'green\\|yellow' "
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    restart: always
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://${ES01_NAME}:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
        "CMD-SHELL",
        "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  mysqldb:
    depends_on:
      kibana:
        condition: service_healthy
    container_name: ${MYSQLDB_HOST_NAME}
    platform: linux/x86_64
    image: mysql:5.7
    env_file: ./.env
    command: --explicit_defaults_for_timestamp
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
    ports:
      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - ./volumes/mysql/db:/var/lib/mysql
      - ./volumes/mysql/scripts:/docker-entrypoint-initdb.d

  fetcher-criacao:
    depends_on:
      - mysqldb
    build: ./fetcher-criacao
    env_file: ./.env
    ports:
      - $SPRING_FETCHER_CRIACAO_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?useSSL=false",
          "spring.datasource.username" : "$MYSQLDB_USER",
          "spring.datasource.password" : "$MYSQLDB_ROOT_PASSWORD",
          "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
          "spring.jpa.hibernate.ddl-auto" : "update"}'
    volumes:
      - ./volumes/fetcher-criacao/:/root/.m2
    stdin_open: true
    tty: true

  fetcher-edicao:
    depends_on:
      - mysqldb
    build: ./fetcher-edicao
    env_file: ./.env
    ports:
      - $SPRING_FETCHER_EDICAO_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
            "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?useSSL=false",
            "spring.datasource.username" : "$MYSQLDB_USER",
            "spring.datasource.password" : "$MYSQLDB_ROOT_PASSWORD",
            "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
            "spring.jpa.hibernate.ddl-auto" : "update"}'
    volumes:
      - ./volumes/fetcher-edicao/:/root/.m2
    stdin_open: true
    tty: true

  fetcher-search:
    depends_on:
      mysqldb:
        condition: service_started
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    build: ./fetcher_search
    command: python3 manage.py runserver 0.0.0.0:${DJANGO_DOCKER_PORT}
    env_file: ./.env
    ports:
      - ${DJANGO_FETCHER_SEARCH_LOCAL_PORT}:${DJANGO_DOCKER_PORT}
    environment:
      - DB_HOST=${MYSQLDB_HOST_NAME}
      - DB_PORT=${MYSQLDB_DOCKER_PORT}
      - DB_NAME=${MYSQLDB_DATABASE}
      - DB_USER=${MYSQLDB_USER}
      - DB_PASSWORD=${MYSQLDB_ROOT_PASSWORD}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -s http://0.0.0.0:8000/healthcheck || exit 1'
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  teacher-app:
    depends_on:
      - mysqldb
      - fetcher-criacao
      - fetcher-edicao
      - fetcher-search
    build: ./teacher-app
    ports:
      - $SPRING_TEACHER_LOCAL_PORT:3000
    volumes:
      - ./volumes/teacher-app/:/root/.m2
    stdin_open: true
    tty: true

volumes:
  db:
  esdata01:
    driver: local
  kibanadata:
    driver: local